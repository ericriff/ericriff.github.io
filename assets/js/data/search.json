[ { "title": "How to compile crosstool-ng", "url": "/posts/compiling-crosstool-ng/", "categories": "Tutorial, Toolchains", "tags": "compile, build, crosstool, crosstool-ng, toolchain", "date": "2022-05-27 18:50:00 -0300", "snippet": "Crosstool-ng is a wonderful tool to create custom toolchains. It’s open source, it has a menuconfig style interface and it’s very flexible, intuitive and self-documented (many help entries). You can learn all about it here.But this tool has a (rather small) flaw: there are no pre-built packages, if you want to use it then you’ll have to build it from sources.This tutorial covers a couple of ways of doing this: natively and docker-based. Everything on this tutorial has been tested on Ubuntu 20.04 LTSNative buildsThis is the most straightforward way of building crosstool-ng: just install the dependencies, run a couple of scripts and you’re good to go. The main drawback of this approach is that you pollute your OS with many packages and their dependencies. If you don’t mind installing packages then you can continue on this path, otherwise use the docker-based builds.Getting the sourcesYou can do this by cloning the repo or downloading a tarball. I’ll use the former method, so I’ll end up in master. There’s nothing inherently wrong with building out of master, but it is recommended to use a release instead. To do this we will list all available tags and choose the latest one.## Start by cloning and cd-ing into the repogit clone https://github.com/crosstool-ng/crosstool-ngcd crosstool-ng## Figure out which release is the latest.## Ignore the ones with the -rc suffix, those are release candidates.git tag -l --sort=-version:refname## Checkout the latest release. At the time of writting that is crosstool-ng-1.25.0.git checkout crosstool-ng-1.25.0Installing requirementsAs mentioned before, in order to build natively you need to install many packages. Since this is an Ubuntu-focused tutorial we will use apt for that:sudo apt updatesudo apt install -y gcc g++ flex autoconf automake texinfo xz-utils unzip help2man file patch gawk make libtool libtool-bin libncurses5-dev bison curl wgetBuilding and InstallingTo build we just need to run the booastrap script and then configure and make. Select a proper install folder with --prefix, I’ll use /opt/crosstool-ng../bootstrap./configure --prefix /opt/crosstool-ngmake allsudo make installRunning it.The tool has been built and installed, but it is not yet (easily) accessible since is not on your PATH. There are many solutions for this, choose the one that you prefer:## 1. Use the absolute path/opt/crosstool-ng/bin/ct-ng menuconfig## 2. Use the PATH env variableexport PATH=/opt/crosstool-ng/bin/:$PATHct-ng menuconfig## 3. Automatically export PATH when you open up a new terminalnano ~/.bashrc## Add export PATH=/opt/crosstool-ng/bin/:$PATH at the end of this filesource ~/.bashrcct-ng menuconfig## 4. Create a symlink to the executable on a place that&#39;s already visible on PATHsudo ln -s /opt/crosstool-ng/bin/ct-ng /usr/bin/ct-ngct-ng menuconfigConclusionNow you’re ready to start building custom toolchains. Happy hacking!Docker-based builds.This way of building this tool is a bit more involved and requires to have docker installed and have some basic understanding of how it works. The main advantage is that nothing will get installed in your OS.The following Dockerfile takes care of everything and it’s fairly straight forward: install the requirements, get the sources, build the tool, install it, delete the sources. After you build this Dockerfile you will end up with an Ubuntu 20.04-based docker image with the latest crosstool-ng installed.Getting startedCreate the following Dockerfile:FROM ubuntu:focal# Create non-root uset since crosstool-ng doesn&#39;t like root.ARG USERNAME=developerARG USER_UID=1000ARG USER_GID=$USER_UIDRUN : \\ &amp;amp;&amp;amp; groupadd --gid $USER_GID $USERNAME \\ &amp;amp;&amp;amp; useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\ &amp;amp;&amp;amp; apt-get update \\ &amp;amp;&amp;amp; apt-get install -y sudo \\ &amp;amp;&amp;amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &amp;gt; /etc/sudoers.d/$USERNAME \\ &amp;amp;&amp;amp; chmod 0440 /etc/sudoers.d/$USERNAME \\ &amp;amp;&amp;amp; apt-get clean \\ &amp;amp;&amp;amp; rm -rf /var/lib/apt/list/* \\ &amp;amp;&amp;amp; :# Install required packagesRUN : \\ &amp;amp;&amp;amp; apt-get update \\ &amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\ gcc \\ g++ \\ flex \\ autoconf \\ automake \\ texinfo \\ xz-utils \\ unzip \\ help2man \\ file \\ patch \\ gawk \\ make \\ libtool \\ libtool-bin \\ libncurses5-dev \\ bison \\ curl \\ wget \\ git \\ openssl \\ ca-certificates \\ &amp;amp;&amp;amp; apt-get clean \\ &amp;amp;&amp;amp; rm -rf /var/lib/apt/list/* \\ &amp;amp;&amp;amp; :# Switch to the non-root userUSER $USERNAME# Get the sourcesWORKDIR /home/$USERNAMERUN git clone https://github.com/crosstool-ng/crosstool-ng.gitWORKDIR /home/$USERNAME/crosstool-ng# Best attempt at checking out the latest releaseRUN git checkout $(git tag -l --sort=-version:refname crosstool-ng-*.*.? | head -n 1)# BuildRUN ./bootstrapRUN ./configure --prefix /opt/crosstool-ngRUN make allRUN sudo make install# Expose ct-ng in PATHENV PATH=/opt/crosstool-ng/bin:$PATH# CleanupWORKDIR /home/$USERNAMERUN rm -rf crosstool-ngCreate the image with the following command. This will take a while. You must run this command on the same folder you have created the Dockerfiledocker build --network=host --tag crosstool-ng .If you got this far, you’re ready to go. Just spawn the docker image you just built and start compiling! docker run -it --rm crosstool-ng bash" }, { "title": "First post! This is just a test", "url": "/posts/first-post/", "categories": "Blogging, Tutorial", "tags": "test, testing", "date": "2022-05-25 19:21:00 -0300", "snippet": "This is a testLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur eget ante arcu. Integer eleifend urna dui, sit amet blandit justo auctor ut. Praesent aliquet nisi et varius volutpat. Curabitur hendrerit ante sit amet nisi hendrerit, non fringilla purus condimentum. Suspendisse at est metus. Curabitur eget faucibus nisi, eget malesuada eros. Etiam congue rhoncus neque eu accumsan. Mauris facilisis, urna sed sodales porttitor, nulla ipsum varius lacus, ac pretium diam mauris vitae neque. Cras venenatis vel lectus eget volutpat. Interdum et malesuada fames ac ante ipsum primis in faucibus.Is this being rendered nicely?Hello there!What about code?# Some python codeprint(&#39;Hello World!&#39;)" } ]
